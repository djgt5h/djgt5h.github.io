[{"title":"编译原理语法分析实验 心得体会","url":"/2019/12/13/编译原理语法分析实验/","content":"\n\n\n## ·引言\n这次的作业在第十三周周五开始，这接近期末的时候，有四门考查课都要准备结课作业啥的，于是时间非常紧张，就希望能够尽快地完成作业。从bison入手，结果在bison上面就花了不少的时间，整晚+熬夜才做完bison。再掉过头来做c++的那一份分析表，因为c++的语法是熟悉的、分析表是自己构造的，所以思路是比bison清晰很多，不过花的时间还是不太少，得有接近四个小时写这两百多行，好久没coding代码能力有所下降了。\n\n这份文档就以时间顺序，结合做的过程写一些碰到的问题和感想。\n\n\n## ·基于flex && bison构造简单计算器\n看了看题目，感觉bison很陌生，应该比较难，就想着先把难啃的做掉，然后时间上是真花了不少。\n\n上回的flex直到做完了才发现老师已经在平台上发了手册，觉得自己找了好长时间资料还是挺有沉没成本的意思，这次就留心了平台上的资料，然后认真看了实验指导里面拍照放出来的bison相关书的图片，看了一两个小时，感觉收获匪浅，比如很清晰地感受到了“说明”、“语法规则”、“程序段”这三个部分分别的含义。\n在“说明”部分，要做的顾名思义就是语法分析工作的定义工作，它用于准备语法分析过程的开始，先是定义了开始符、语义值类型、终结符声明，也在这个步骤里面规定了归约的优先次序，做好这些工作，在“语法规则”中制定的规则就可以有所依据地选择归约。当然，在语法规则中提供的语义动作才是我们最后直接能够呈现在结果里面的东西。最后的程序段相当于是把bison写好的一些函数组织起来，实现自己的目的。语法方面，比较陌生的就是定义的语法，像%token用来定义非终结符这样的，和flex功能上有区别。而其他的，像是语义规则，形式上本身就好理解，设计上又和flex同出一脉，看起来还是没有障碍的。\n\n看完手册里面的十几页书，我感到满脑子都是想法，但是打开编辑器想要动手，结果发现啥都写不出来。理论到实践还是有很大的距离的啊，书上感觉还是以基本的概念为主，为了实操，我还是去找一下资料，看看别人的代码。主要看着这个学感觉不错：[bison计算器相关博客](https://blog.csdn.net/qq_35208390/article/details/78249181)\n\n这也是给我带来很大的一个心得体会：虽然bison本身是一个工具，不过实际上也是一个新的开发手段，不能够想着看十几页文档就直接自己能创造出符合条件的代码了。还是要从别人写好的东西看起，不然理论到实践之间那个桥梁，不靠模仿是搭不起来的。\n\n说起来，看完了手册后最大的一个疑虑是，bison里面对于非终结符是有默认分配常量的方法的，所以flex里匹配完了只需要返回对应的常量就行了，但是flex和bison如果不能同时编译，不在flex中引用bison，那么是获取不了常量的，比如说，如果INTEGER在bison中分配了270这个数值，但是在flex中是不知道的。虽然感觉可以.l里面宏定义一下，然后在.y文件里手动规定数值，但是这样感觉很生硬，而且有好多量，包括SIN COS LOG等等等等的，手动配置一遍有点傻。还好，在博客里发现了，它在.l文件里面引用bison产生的头文件来解决这个问题，我也就模仿着这么做了。\n\n实际上最后的实现是有不严谨的地方的，就是这里直接把yylval的值定义成了double，因为这样已经够处理题目里的所有情况了。但是严谨和通用性来考虑的话，写一个union应该是更好的，可惜我尝试的过程中，语法上出了很多知识盲点，尝试过之后，最后还是放弃了。\n\n这个过程中特别强调要有这句话：\n`#define YYSTYPE double`\n刚开始做了好久，1 + 1的结果却一直是0，就是因为没有规定yylval的类型，它默认是int型，而读进的时候用了atof转成了浮点型，就出问题了。是0的问题还可能是没有包含stdlib库。\n\n最后稍微提一下几个技巧，pi我是用2 * asin(1)来表示的，define成数值也一样吧。还有输出的时候，可以用printf(“%g\\n”, val)，这个格式会自动选择最优的，小数的输出会去掉无意义的后缀0。\n\n## ·基于LR分析表编写语法分析器\n引言里也提到了，做这一部分的时候还是相对思路更加清晰的，时间上算起来也比bison要花得少，大概接近4个小时吧，不过因为这里面用到的语法我大部分都是熟悉的，所以用到这么多时间，实际上还是可以更高效更快地做出来的。\n\n这一部分的核心其实就是LR分析表，这个头几天在作业里手工制作了，做这个的过程属实可怕。这里面核心的思想就是模拟出作业里用到的，结合Acition-Goto表进行语法分析的过程。还是想再强调一遍，被作业虐过之后再来模拟竟然发现思路上相当清楚，毫无障碍。\n\n碰到的第一个需要考虑的问题，就是我如何存这张Action-Goto表。这里面我写了一个ActionGoto的类，表示对于确定的项目族、文法符号，对应的动作。这个动作就有可能是归约、移进、接受、goto到某一个项目、出错。这里我用了几个变量分别标识出它是什么类型、操作的数字是什么，并且定义添加数值的方法。构建一个actionGoto[][]对象二维数组，挨个往里面填数据就行。（填数据表的过程非常的机械性和枯燥）。\n\n对于词法分析部分，刚开始想一边读入一边处理，结果写出问题来了，就是没有把输入串存起来，匹配一次就丢掉了，这样对于归约动作来说就出错了。所以后面还是把词法分析单独拿了出来，先把分析出来的token放在了inQueue里面。这里词法分析我就没有用DFA了，因为这里很好匹配，就往后看一位就可以知道当前这个是什么类型，总共其实就是两大类token，符号和id。\n\n还需要构建的一个表是产生式的信息表，需要在归约的时候读到两个信息；左部非终结符是什么、右部有几个文法符号（决定要从栈中取出几个元素）。这个我就构建了Production类，构造了production[]对象数组。这里面填值就少多了，毕竟总共6个产生式。\n\n这些准备工作其实也不是一开始就能想到的，如果直接凭空去想，进行分析之前我需要什么表，哪些变量，那肯定也是想不清楚的，需要去尝试写一些过程，然后发现之前我还需要什么，比如想到需要做动作，知道要把分析表填充起来；想到分析的过程需要操作分析栈和状态栈，就把这两个栈定义好；想到归约的时候需要知道产生式的信息，于是定义Production类。自顶向下逐步求精就是这个意思了。\n\n移进只要把对应的符号移入状态栈和分析栈就行，归约稍微复杂一些，首先要根据使用的产生式，将对应数量的符号、状态出栈，再根据处理后的状态栈顶状态、待分析的符号，求goto的状态，将其入栈，实际上也没有多几行代码。acc的时候要判断为正确。\n\n最值得一提的是，因为这里面的词法分析我默认的id定义是，除了文法中已有的终结符，其他任意符号都构成id，比如a+b我的词法分析是id + id，而a-b我的词法分析结果就是id，毕竟产生式里没有-，我也就权当id里允许用-。谁知道测试样例里偷偷塞了一个减号，于是第三个点就挂掉了。之后我判断含有- * /的为非法输入，就可以过掉了。\n\n方法在课上已经讲述得很详尽之后，coding工作还是不困难的，相比还是基于bison难，啥语法都不会哈哈。\n","tags":["编译原理"]},{"title":"汇编与接口-8255控制数码管","url":"/2019/12/10/汇编实验-8255控制数码管/","content":"\n## 8255基本输入输出、8255数码管显示实验\n\n### 1.\t实验目的\n了解和掌握8255的输入输出方式，掌握二极管、数码管控制的方式\n  \n### 2. 实验内容（步骤）\n####  基本输入输出实验\n（1）按照实验原理图连线。\n![](1.jpg)\n（2）编写控制程序，使得8255的A口为输入口，B口为输出口，通过A口读到K的控制信号，转而通过B口输出到D的灯管中。\n（3）编译、连接、运行后，在实验系统上拨动不同K的开关，观察到对应的二极管亮起。\n####  数码管控制实验\n（1）按照实验原理图连线。\n![](2.jpg)\n（2）编写控制程序，使得A口为输出，B口也为输出，A口控制数码管内容的显示，B口选择数码管的种类。将数码管显示的10个数字保存下来，利用循环、延迟的方式，制作出从数字9到数字0倒计时的效果。并且在数字变换的循环外层嵌套循环，使得循环可以一直进行。使用16H的1号指令判断有无键盘输入，如果有，则退出程序。\n（3）编译、连接、运行，查看倒计时程序是否正常运行。\n\n### 3. 实验原理、程序记录\n（1）实验根据8255的输入输出方式原理，来设计线路，达到需要的输出效果。前一个实验使用到了A口作为输入口的使用方法，后一个实验用到了两个口均为输出口的使用方法。当作为输入口的时候，可以使用IN指令，使得数据通过总线读到系统中，在这个基础上可以使用输出口将读到的数据传出，达到控制的目的。\n#### （2）程序1：\n\n```asm\n; 基本输入输出点亮二极管程序\n;T8255-1.asm\n;8255基本输入输出实验\n\nIOY0         EQU   0E000H          ;片选IOY0对应的端口始地址\nMY8255_A     EQU   IOY0+00H*4     ;8255的A口地址\nMY8255_B     EQU   IOY0+01H*4     ;8255的B口地址\nMY8255_C     EQU   IOY0+02H*4     ;8255的C口地址\nMY8255_MODE  EQU   IOY0+03H*4     ;8255的控制寄存器地址\n\nSTACK1 SEGMENT STACK\n        DW 256 DUP(?)\nSTACK1 ENDS\n\nDATA1  SEGMENT   \t\nMES    DB   'Press any key to exit!',0AH,0DH,0AH,0DH,'$'\nDATA1  ENDS\n\nCODE SEGMENT\n        ASSUME CS:CODE\n\nSTART: MOV AX,DATA1\n       MOV DS,AX\n       MOV DX,OFFSET MES          ;显示退出提示\n\t   MOV AH,09H\t\t\n\t   INT 21H\t\n\t   \n       MOV DX,MY8255_MODE         ;初始化8255工作方式\n       MOV AL,10010000B                 ;工作方式0，A input B output\n       OUT DX,AL\n\nLOOP1: MOV DX,MY8255_A            ;读A口\n       IN  AL,DX\n       MOV DX,MY8255_B            ;写B口\n       OUT DX,AL\n\n       MOV AH,1                   ;判断是否有按键按下\n       INT 16H\n       JZ  LOOP1                  ;无按键则跳回继续循环，有则退出\n\nQUIT:  MOV AX,4C00H               ;结束程序退出\n       INT 21H\n\nCODE ENDS\n     END START\n```\n\n#### （3）程序2：\n```\n;控制倒计时数码管程序\nIOY0         EQU   0E000H          ;片选IOY0对应的端口始地址\nMY8255_A     EQU   IOY0+00H*4     ;8255的A口地址\nMY8255_B     EQU   IOY0+01H*4     ;8255的B口地址\nMY8255_C     EQU   IOY0+02H*4     ;8255的C口地址\nMY8255_MODE  EQU   IOY0+03H*4     ;8255的控制寄存器地址\n\nSTACK1 SEGMENT STACK\n        DW 256 DUP(?)\nSTACK1 ENDS\n\nDATA SEGMENT \nMES     DB  'Press any key to exit!',0AH,0DH,0AH,0DH,'$'\nLA      DB  ?                     ;定义数据变量\nLB      DB  ?\n;把从9到0的数字放在NUM数组里\nNUM     DB 6FH,7FH,07H,7DH,1101101B,66H,4FH,5BH,06H,3FH  \nDATA ENDS\n\nCODE SEGMENT\n        ASSUME CS:CODE,DS:DATA\n\nSTART: MOV AX,DATA\n       MOV DS,AX\n       MOV DX,OFFSET MES          ;显示退出提示\n\t   MOV AH,09H\t\t\n\t   INT 21H\t\t\n\n       MOV DX,MY8255_MODE         ;定义8255工作方式            \n       MOV AL,80H                 ;工作方式0，A口和B口为输出\n       OUT DX,AL\n\n       MOV DX,MY8255_A            ;写A口发出的起始数据\n       MOV AL,011111B\n       OUT DX,AL\n       MOV LA,AL\n\ninfinite:\t   MOV CX,10\n\t   MOV AX,0\n\t   MOV SI,AX\n\t   \nLOOP1: MOV DX,MY8255_B            ;写B口发出的起始数据\n       MOV AL,NUM[SI]     \t\t\t  ;9\n       ADD SI,1\n       OUT DX,AL\n       MOV LB,AL\n\t   CALL DALLY\n\t   MOV AH,1                   ;判断是否有按键按下\n       INT 16H\n       JNZ QUIT\n\t   LOOP LOOP1\n\t   JMP infinite\n\t   \n\nQUIT:  MOV AX,4C00H               ;结束程序退出\n       INT 21H\n\nDALLY PROC NEAR                   ;软件延时子程序\n       PUSH CX\n       PUSH AX\n       MOV  CX,3FFFH\nD1:    MOV  AX,0FFFFH\nD2:    DEC  AX\n       JNZ  D2\n       LOOP D1\n       POP  AX\n       POP  CX\n       RET\nDALLY ENDP\n\nCODE ENDS\n     END START\n```\n\n### 5. 实验结果及分析\n简单的输入输出实现能够实现使用开关控制二极管的目的，推动K1可以看到D1亮起，推动K3可以看到D3亮起。\n数码管倒计时可以达到要求，程序运行之后，数码管将显示从9到0的十个数字，中间间隔一定时间。并且，当需要退出的时候，只需要在键盘上敲击任意键，数码管就会停止变换，并且程序退出。\n倒计时实验中，改动B口输出，可以控制数码管亮起的数量，可以选择哪一个或者哪几个数码管亮起。\n\n### 6. 实验体会\n（1）8255的工作方式让我对芯片工作的流程认知更加清晰了，这一次实验有自己构造倒计时的要求，所以就需要自己考虑控制字、控制信号的问题，这些之前的实验其实很多时候是在已有的基础上改动的，就没那么概念清晰。\n（2）构造倒计时的过程中，又复习了数组的使用、循环的使用、跳转的时候标志位的使用等等知识，应该说用汇编语言实现这样需求的过程还是很体现综合能力的。虽然这些东西之前都接触过和用过，但是也有很大程度上会遗忘的，用一用印象明显更深了。\n（3）对于实验的控制系统部件又多熟悉了一些，也是因为8255这次用得比较简单，简单地进行输入输出就可以了，所以就很能够让我捋清楚连线的时候是在构造怎么样的过程。\n","tags":["汇编语言与接口技术"]},{"title":"自我介绍[置顶]","url":"/2019/12/08/Self-Introduction/","content":"\n<div style=\"color: blue;\">\n<audio controls=\"controls\" src=\"music.mp3  \" >\n</audio>\n<br/>\n&emsp;↑这是一个简单的自我介绍音频\n</div>\n<p></p>\n\n&emsp;&emsp;我是江南大学计科1702班的徐宗浩，浙江杭州淳安人。这篇自我介绍写于博客建站的时候，2019年12月。此时我正在读大三，站在现在的时间点，看看自己在大学中走过了怎样的路，看看自己20年的光阴在身上留下了什么样的痕迹，这还真是一件不错的事。\n\n&emsp;&emsp;总之，我热爱我的生活，因为它往往带给我希望，哪怕时常也有些遗憾。\n\n\n## 一、学习\n### 1.起点\n这是大学的起点。\n{% raw %}\n <link rel=\"stylesheet\" type=\"text/css\" href=\"RLcarousel4.css\"/>\n<div align=\"center\">\n  <div class=\"frame\">\n    <img class=\"slide slide-animation-1\" src=\"p1.JPG\" alt=\"\">\n    <img class=\"slide slide-animation-2\" src=\"school-opening1.jpg\" alt=\"\">\n    <img class=\"slide slide-animation-3\" src=\"school-opening2.jpg\" alt=\"\">\n    <img class=\"slide slide-animation-4\" src=\"初到江大风景照.JPG\" alt=\"\">\n  </div>\n</div>\n<br/>\n{% endraw %}\n\n&emsp;&emsp;高中的老师再说完最后的祝福，江南大学的开学典礼将我迎入校园，上课下课时候走在江大的校园里、抬头是美丽的校园风景。这是多么完整的起点......\n\n&emsp;&emsp;**吗？**\n\n&emsp;&emsp;或许是，但，又或许不是。如今想来，2017年暑假，高中毕业，这时候满志踌躇的我，和一位厉害的学长偶尔在qq上有了交集。这或许就是我大学的真正开始。\n\n<img src=\"林浩文的证书.JPG\" style=\"width: 60%\" />\n<br/>\n\n&emsp;&emsp;这张照片于2017年7月1日出现在我的手机相册里，来自这位至今在我看来都是个传奇的学长。在迎新群非常偶然地找到了这位学长私聊，却在交流的过程中屡屡被他表达的大学生活所打动。高考结束，我生来谨慎保守的性格让我从不羡慕或者期盼传闻中轻轻松松的大学生活，但是我追求的到底是什么样的大学生活呢？不知道。是的，不知道。 **人很容易知道自己不想要什么，但是却很难知道自己想要什么。**我明确知道，我不想要追求纯粹的安逸，可是，如果我要追求挑战，到底我要走的是一条什么样的路，它会把我指向何方？\n\n&emsp;&emsp;学长给了我答案。努力地去对待学习，面向一堆荣耀的tag而努力。在他给我发来满屏的奖状的时候，在他“无意间”透露出他是专业第一的时候，我被这些tag吸引了。那个时候，我发现了一件非常不得了的事情，**我好像知道了我想要什么，我想要未来我的床上，也有这雪花般的荣誉可以堆积。**\n\n&emsp;&emsp;是的，我知道我要什么了。但是，另一个问题瞬间涌到面前：**我行吗？**\n\n<!-- 这是个轮播图 -->\n<!-- <div align=\"center\">\n  <div class=\"frame\">\n    <img class=\"slide slide-animation-1\" src=\"ss.jpg\" alt=\"\">\n    <img class=\"slide slide-animation-2\" src=\"https://cdn.pixabay.com/photo/2012/03/01/00/21/bridge-19513__340.jpg\" alt=\"\">\n    <img class=\"slide slide-animation-3\" src=\"https://cdn.pixabay.com/photo/2017/03/29/15/18/tianjin-2185510__340.jpg\" alt=\"\">\n    <img class=\"slide slide-animation-4\" src=\"https://cdn.pixabay.com/photo/2016/05/05/02/37/sunset-1373171__340.jpg\" alt=\"\">\n  </div>\n</div>\n -->\n <br/>\n\n\n### 2.上路\n&emsp;&emsp;行或者不行，总得试了才知道。\n\n <link rel=\"stylesheet\" type=\"text/css\" href=\"RLcarousel4.css\"/>\n<div align=\"center\">\n  <div class=\"frame\">\n    <img class=\"slide slide-animation-1\" src=\"study1.JPG\" alt=\"\">\n    <img class=\"slide slide-animation-2\" src=\"study2.JPG\" alt=\"\">\n    <img class=\"slide slide-animation-3\" src=\"study3.JPG\" alt=\"\">\n    <img class=\"slide slide-animation-4\" src=\"study4.JPG\" alt=\"\">\n  </div>\n</div>\n<br/>\n\n&emsp;&emsp;努力的生活是不轻松的，但是现在回想起来，大一上是一段非常有意义的日子。那个时候我其实对未来并没有什么猜想或者是期待，那个时候，我考虑的只是当时眼前的事。下一节是什么课，今天要掌握的是什么内容。当我对“变得优秀”的执念，内化成了内心的要求之后，每一个课程，都成了我小心谨慎、不敢疏忽的挑战。就在这样的心态下，我不断地往前走着。\n\n\n\n### 3.路，一直在蔓延\n&emsp;&emsp;其实我一直觉得，我是幸运的。大学的学习生活走过来，我的努力似乎总会带给我不错的结果。即便是课程的考试考核中，时常出现意外的失误，导致我和真正理想的成绩失之交臂，然而我的排名却始终在专业前3名。\n\n<img src=\"驾校风景照.JPG\" style=\"width: 70%\" />\n<br/>\n\n&emsp;&emsp;所以当初的小心谨慎而又宏大理想，被证明是有意义的。努力学习，最后结果，其实是诚不负我的。\n\n>&emsp;&emsp;努力学习的道路，从进入大学开始，就在我的脚下，不断地蔓延开来，直至今日，直至写下只写文字的此时，它仍然将它的力量环绕在我的周遭，布局在我的视野之中，伸展在我的眼界之外。它的益处既在客观实在上，又在我的精神实在上，我感激曾经的自己，并且期待着未来的自己。\n\n\n\n## 二、ICPC竞赛\n### 1.ICPC介绍\n&emsp;&emsp;这个比赛叫做[国际大学生程序设计竞赛(International Collegiate Programming Contest，简称ICPC)](https://baike.baidu.com/item/ACM%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B/3652262?fromtitle=%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B&fromid=456657&fr=aladdin)。比赛的具体信息百科都有。作为选手，我来小小地说说看这个比赛的名称上有趣的事情。\n&emsp;&emsp;常年来，ICPC都和ACM绑在一起，我们的俱乐部也叫ACM俱乐部。\n\n<img src=\"学院ACM.JPG\" style=\"width: 70%\"/>\n<br/>\n\n&emsp;&emsp;要是之前呢，叫它ACM比赛倒也是没有太大的问题，因为它是有ACM赞助的，不过还是许多人把ACM和ICPC等同起来了。ACM本身是顶尖的计算机学术组织，用一个算法竞赛来认知它未免狭隘了一点。现在呢，再把ICPC叫作ACM的话，就很尴尬了，因为现在ACM不再赞助它了，ICPC也有新的赞助商，JetBrains。\n\n<img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=f2f4e2c9fddcd100cd9cff274ab0202d/6a600c338744ebf8d37f2cfbdcf9d72a6159a7ec.jpg\" style=\"width: 50%\"/>\n<br/>\n\n&emsp;&emsp;那我们要把这个比赛叫做JB吗？\n\n&emsp;&emsp;咳咳，不用，不管赞助商怎么变，叫它ICPC就对了，这肯定是不会变的啦。\n\n### 2.我的ICPC生涯\n&emsp;&emsp;故事的终点，是2019区域赛南京站的铜牌。\n\n<div align=\"center\">\n  <div class=\"frame\">\n    <img class=\"slide slide-animation-1\" src=\"南京铜1.JPG\" alt=\"\">\n    <img class=\"slide slide-animation-2\" src=\"南京铜2.JPG\" alt=\"\">\n    <img class=\"slide slide-animation-3\" src=\"南京铜3.JPG\" alt=\"\">\n    <img class=\"slide slide-animation-4\" src=\"南京铜4.jpg\" alt=\"\">\n  </div>\n</div>\n<br/>\n\n&emsp;&emsp;当然也会为没有拿银牌而多少有些遗憾，但是拿过银牌的学长学姐和身边的同学，他们也的的确确是要比我更厉害一些，会的算法、做题的经验比我们队伍要更丰富一些。即便偶尔会想到自己“理论上拿银的可能性”，最终也还是接受拿铜退役的结果。每年都有很多选手没有拿到奖牌，就结束了自己的算竞生涯。他们未必是没有实力，可能只是运气不好。相比之下，这块我们配得上的铜牌，已经是很好的鼓励了。\n\n&emsp;&emsp;现在想来，恍若隔世。大一的时候，在前文提到学长的推荐下，报名了学校的校赛，然后非常惨地被虐了。被虐之后就不太甘心了，于是在俱乐部招新前夕，努力地去做了一些入门的题目。那个时候还没有学到什么算法，但是把做题常用的写法好歹是掌握了一些，没想到，招新赛我就非常顺利地打了进来。\n\n\n<img src=\"ACM3.PNG\" style=\"width: 70%\" />\n<br/>\n\n>&emsp;&emsp;从大一下开始，我的生活就多加了训练的内容。当然是更加辛苦了，但是我没有因为辛苦而想过放弃，因为希望真正地有所收获，所以我所怕的，唯有我的能力是不是足够而已。现在看来，我确实没能够拿出非常棒的成果，但是最初对自己能力偏执的怀疑，也是有所不应当的，我还是应该并且可以多自信一点的啊。\n\n## 三、日记\n&emsp;&emsp;说着说着就说了这么多了。我仅仅是在写博客的时候这么多话吗？其实不是的，我还喜欢写日记。\n\n<img src=\"日记.PNG\" style=\"width: 50%\" />\n<br/>\n\n&emsp;&emsp;不管自己的努力，是不是能够如愿得到回报，在努力的过程中还是会遇到很多时刻，感到疲惫、感到吃力、感到焦虑的啊。还记得大二有一次，因为生活上的烦恼陷入非常重的情绪中时，翻开日记本刷刷一顿写，终于能够慢慢平静下来的时候，我就觉得日记本还是一个很棒的东西。**解决问题最好的办法，永远是直面它**，这句话说得不错，可是，**如果问题是这么轻易就可以直面的话，它就不成一个问题了。**在日记本里记录下的一个又一个焦虑、痛苦、担心，它们对应的事情，大多最终还是没有产生恶劣的影响，有的是慢慢地就被解决了，有的是随着时间的变化，情况发生了变化，曾经的矛盾就消失了。可是，记录这些事情的时候，我无法预知往后的变化，我无从知晓我的担心是不是真切地存在。倘若此时我能够利用的条件不足以支持我去解决问题，那么我就选择先用写日记的方式舒缓一下情绪。这，是这些日记陪伴着我的重要意义啊。\n\n&emsp;&emsp;不过，其实用一本本子来记录东西初衷，并不是写日记，那是我大一上刚开学的时候，想为自己每天的学习列一列计划，好让自己清楚，一个晚上到底能学多少东西，我是不是利用好了这些时间。然而，慢慢地，记录计划之外的语言就多了起来，再慢慢地，索性就变成了一个日记本。\n\n>&emsp;&emsp;日记是自己对当下处境的投射。我也挺感谢这几个本子的，它们给我的平凡生活添加了一些想象的空间，给我的压力提供了一个支撑的杠杆。\n\n## 四、期待\n&emsp;&emsp;写下这篇博客的时候，大三上的第一个学期已经接近尾声了，而本文开头提到的那位学长，在中科大的研一上生活也已经接近尾声了。从这个学期伊始我便常在期待一个问题，那就是，**明年今日，我会怎样**？\n\n<img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576220698544&di=01381412bdaae45ea918a075a714690e&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn13%2F399%2Fw580h619%2F20180805%2Fbdb1-hhhczfa8093950.jpg\" style=\"width: 40%\"/>\n<br/>\n\n>&emsp;&emsp;这个问题，现在无人可以回答我。那个我如今憧憬和期待着的未来会是什么样子的呢，在这里邀请***@2020年秋天的自己***来回答这个问题。不论结果指向何方，那都是对自己大学努力的一个交代，我正热切地期盼这一个交代啊。","tags":["自我介绍"]},{"title":"编译原理词法分析实验 心得体会","url":"/2019/11/10/编译原理词法分析实验/","content":"\n\n## DFA文档\n![](a.png) \n\n## 真实心得\n### 1. 基于flex构造词法分析器\n\n刚开始看到要基于flex构造词法分析器还是很头疼的，因为是一种新的工具。开始动手得比较早，也没注意看老师在平台发布的资料，就报着要学新东西的沉重心态开始百度flex。\n\n最先对我产生帮助的是[这篇博客](https://blog.csdn.net/pfl_327/article/details/83148040)，它通过简单的示范代码、详细的步骤来演示如何让flex工作，我按照它的步骤完成了输入输出。还好之前有过命令行编译.cpp文件的经历，所以对这个工具的用法不至于太陌生，配合配置好的环境变量，我就可以用指令：`win_flex do.lex && gcc lex.yy.c && a`直接运行生成的.exe文件了。\n\n通过读他的示范代码，我就大概理解了flex代码的编写主要就是通过正则表达式来匹配想要匹配的内容，然后在行为上定义匹配后的动作是什么。支持在模块中定义自己需要使用的C变量和代码。\n\n这样的话，根据已有的C基础，我需要学习flex的编码格式。这部分我首先是找到了[这篇博客](https://blog.csdn.net/mist14/article/details/48641349),我就知道了%%分隔开来的三部分分别是定义、匹配规则、定义函数。所以在第一部分进行正则匹配的定义、第二部分执行相应的规则、最后定义主函数的操作就行。\n此外，一些使用方法，特别是匹配`/**/`的注释部分，我从[官方文档](https://wenku.baidu.com/view/42c24413360cba1aa911da7f.html)里面找到思路。\n\n关于实现，每匹配到一个token就手动添加一次结果有点麻烦了，在flex中，第一部分之前还支持在`%{  %}`之间定义一些动作中需要用到的函数和变量，在这部分我定义了rightout errorout两个变量用来存储最后的输出（其实后来发现只要一个输出变量就行了，所以手动构造的那个里面就只用了一个），lines变量用来找到行数，还定义了addrightout adderrorout来向两个用于输出的变量写入内容，这样匹配到字符串以后，定义的动作里面只要调用一下函数就可以了。\n\n最后主函数里面，根据是否有错，输出统计好的变量就行。这里主函数因为是自己定义的，需要重写一下yywrap函数，返回1。刚开始看到报错说yywrap未定义我是懵的，还好这个问题百度一下就能找到，其实在上面的博客里面也是有的。\n\n最后能过掉还是挺开心的，就是有几个warning没有去掉，从一方面来说这个部分锻炼了我学习新工具的能力，但是从这几个warning也看出了我读手册、收集信息的能力还有待提高啊。\n\n### 2. 手工构造词法分析器\n刚开始我觉得这个部分是很困难的，于是上github搜了一下有没有类似的，搜了一个花了好一段时间看了一些部分，还没看到核心部分，就发现他的代码写得，构造得不太好，可读性特别差，用了类似滚动数组的方式创建缓冲的数组，感觉是没必要的。后来索性就不参考别人的了，直接动手自己造吧。\n\n以前听说Visual Studio是宇宙级别好用的IDE，想了想这次就把它下下来，杀鸡用一下牛刀。过程倒是还行，不过最后交程序还有点不顺。\n\n我的思路就是构造一个LexAnalysis类，里面核心的函数有两个，getOneToken，getTokenType，这就是我的核心思路，打算先扫出一个token，再来分析它的类型，根据类型作不同的输出处理。\n\n其中最核心的其实还是getOneToken这个函数，因为得到了Token之后，再分析它的类型显然是相对简单一点的。DFA本身是一边判断类型一边进行状态转移的，这里把这两个状态分开，坏处是强行割裂了扫描和判断的关系，那么在两个函数里面肯定会有一些有些重复的工作。不过由于这里第二个函数工作量是不大的，而分开会给第一个函数减少一些构造思路，所以还是选择了分开处理。关于getOneToken具体的实现，核心是我用了一个bufChar，来存储“上一次停下扫描时候读到的字符”，比如a>b，那么我会扫描到>号停止，这样下一次进入的时候我还是需要读到这个>号，怎么办呢，就把>号存在bufChar里面，每一次扫描的开始，先处理bufChar，看看是不是需要拼接到本次扫描的结果里。还有一些细节可以参考代码里的注释。\n\n说到注释，这次写了百来行的时候突然想到软件工程课上有说过一个原则，叫作“有效注释要占总代码的百分之三十”，所以这个.cpp里写了好多的注释，特别是扫描的核心函数，都用注释写了一下大体思路。感觉写注释确实还是有助于让自己一边写一边梳理思路的，不过也确实感受到，当思路已经清晰的时候还是要强迫自己在模块的开头写几行注释的时候，是真不想写。“程序员最讨厌的事情有两件：一是别人写的代码没注释，二是要给自己的代码写注释”，嗯，体会更深了。\n\nVS里构建、调试过了之后（Debug确实比我之前手动cout来Debug要好用一点哈），直接把带有cpp的文件夹打包上传平台，发现过不了编译，sprintf_s在平台的编译器里通不过。VS里，改成sprintf又通不过，懵了。还好也就写了一个类，其实跟没写一样，就把.h .cpp的代码整合到main里面，改成sprintf以后用g++编译，过了本地的编译，再交平台以后一发就过了，很爽。\n\n手工构造过程里碰到了很多的问题，比如一开始存结果用的是`char*`，于是各种内存处理的隐患让VS阻止了我很多操作。最后能搞完，很大的体会是工程性的工作不容易啊，要处理模块之间的关系，相对于短码实现一个模块的内容有时候需要的巧妙方法、高端算法，处理模块之间关系的工程思维也是我很需要锻炼的。\n","tags":["编译原理"]}]